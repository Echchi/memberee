generator db {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  userid    String
  password  String
  name      String
  phone     String
  email     String
  mode      Int       @default(1)
  role      Int       @default(1) // 1: 일반 회원, 2: 관리자
  status    Int       @default(1) //  0: 탈퇴, 1: 가입
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Company   Company[]

  @@index([userid])
  @@index([name])
  @@index([phone])
}

model Company {
  id        Int       @id @default(autoincrement())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  name      String
  num       String
  contact   String?
  startTime DateTime?
  endTime   DateTime?
  payDay    Int       @default(1) // 납부 일자 (매 월 00 일 1 ~ 31)
  status    Int       @default(1) // -1: 중단, 0: 탈퇴, 1: 영업중
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Worker    Worker[]
  Member    Member[]

  @@index([userId])
  @@index([name])
  @@index([num])
}

model Worker {
  id              Int               @id @default(autoincrement())
  company         Company?          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       Int?
  name            String
  birth           DateTime?
  phone           String
  commission      Int?
  dayOfWeek       String?
  startDate       DateTime?
  bank            String?
  accountNumber   String?
  endDate         DateTime?
  status          Int               @default(1) // 0: 퇴사, 1: 근무중
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Member          Member[]
  Schedule        Schedule[]
  WorkerMemos     WorkerMemo[]
  WorkerChangeLog WorkerChangeLog[]

  @@index([companyId])
  @@index([name])
  @@index([phone])
}

model WorkerMemo {
  id        Int      @id @default(autoincrement())
  content   String
  workerId  Int
  worker    Worker   @relation(fields: [workerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workerId])
}

model LessonFee {
  id        Int      @id @default(autoincrement())
  type      String // "Weekday" or "Weekend"
  frequency Int // 주중 또는 주말 수업의 빈도 (예: 1, 2, 3)
  amount    Int // 해당 수업 유형 및 빈도에 대한 수업료 금액
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Schedule  Schedule[]
  @@unique([type, frequency])
}

model Schedule {
  id             Int              @id @default(autoincrement())
  worker         Worker           @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId       Int
  member         Member           @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId       Int
  lessonFee      Int
  dayOfWeek      Int // 요일을 나타내는 숫자 (1: 월요일, ..., 6: 토요일, 7: 일요일)
  startTime      DateTime
  endTime        DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Attendance     Attendance?
  ScheduleMember ScheduleMember[]
  Salary         Salary?          @relation(fields: [salaryId], references: [id])
  salaryId       Int?

  @@index([workerId])
  @@index([memberId])
  @@index([salaryId])
  @@index([dayOfWeek])
}

model ScheduleMember {
  id         Int      @id @default(autoincrement())
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  member     Member   @relation(fields: [memberId], references: [id])
  memberId   Int

  @@index([scheduleId])
  @@index([memberId])
}

model Salary {
  id              Int      @id @default(autoincrement())
  salaryForLesson Int
  salaryPayment   Int?
  tax             Int?
  lessonCount     Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Schedule Schedule[]
}

model Member {
  id              Int               @id @default(autoincrement())
  worker          Worker            @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId        Int
  company         Company?          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       Int?
  name            String
  phone           String
  birth           DateTime?
  job             String?
  startDate       DateTime?
  endDate         DateTime?
  suspendedDate   DateTime?
  status          Int               @default(1) // -1: 중단, 0: 탈퇴, 1: 수강중
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Payment         Payment[]
  Attendance      Attendance?
  Schedule        Schedule[]
  Memos           Memo[]
  ScheduleMember  ScheduleMember[]
  WorkerChangeLog WorkerChangeLog[]

  @@index([workerId])
  @@index([companyId])
  @@index([name])
  @@index([phone])
}

model Memo {
  id        Int      @id @default(autoincrement())
  content   String
  memberId  Int
  member    Member   @relation(fields: [memberId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
}

model Attendance {
  id             Int      @id @default(autoincrement())
  Schedule       Schedule @relation(fields: [ScheduleId], references: [id], onDelete: Cascade)
  ScheduleId     Int      @unique
  member         Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId       Int      @unique
  attendanceDate DateTime
  attendanceTime DateTime
  Status         String

  @@index([ScheduleId])
  @@index([memberId])
}

enum Status {
  Present
  Absent
}

model Payment {
  id            Int       @id @default(autoincrement())
  companyId     Int       @default(-1)
  member        Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId      Int
  forYear       Int? // 어떤 연도에 대한 납부인지 나타내는 컬럼
  forMonth      Int? // 어떤 월에 대한 납부인지 나타내는 컬럼
  paymentDate   DateTime? // 실제 납부가 이루어진 날짜
  lessonFee     Int? // 납부 금액
  paymentMethod String? // 납부 방법
  memo          String?
  workerId      Int

  @@index([memberId])
  @@index([forYear, forMonth])
}

model WorkerChangeLog {
  id               Int      @id @default(autoincrement())
  workerId         Int
  memberId         Int
  changedDate      DateTime @default(now())
  previousWorkerId Int

  worker Worker @relation(fields: [workerId], references: [id])
  member Member @relation(fields: [memberId], references: [id])

  @@index([workerId])
  @@index([memberId])
  @@index([changedDate])
}
