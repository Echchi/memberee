generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int       @id @default(autoincrement())
  password  String
  name      String
  phone     String    @unique
  email     String?   @unique
  role      Int       @default(1)
  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Company   Company[]
}

model Company {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  name      String
  contact   String?
  startTime DateTime?
  endTime   DateTime?
  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Worker    Worker[]

  @@index([userId])
}

model Worker {
  id           Int            @id @default(autoincrement())
  company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    Int
  name         String
  phone        String         @unique
  startDate    DateTime?
  endDate      DateTime?
  status       Int            @default(1)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Member       Member[]
  WorkerMember WorkerMember[]
  Schedule     Schedule[]

  @@index([companyId])
}

model Schedule {
  id            Int             @id @default(autoincrement())
  worker        Worker          @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId      Int
  member        Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId      Int
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  WorkerPayment WorkerPayment[]
  Attendance    Attendance?

  @@index([workerId])
  @@index([memberId])
}

model WorkerPayment {
  id               Int      @id @default(autoincrement())
  Schedule         Schedule @relation(fields: [ScheduleId], references: [id], onDelete: Cascade)
  ScheduleId       Int
  paymentForLesson Decimal
  basePayment      Decimal
  lessonCount      Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([ScheduleId])
}

model Member {
  id           Int           @id @default(autoincrement())
  worker       Worker        @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId     Int
  name         String
  phone        String        @unique
  startDate    DateTime?
  endDate      DateTime?
  status       Int           @default(1)
  memo         String        @db.MediumText
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  WorkerMember WorkerMember?
  Payment      Payment?
  Attendance   Attendance?
  Schedule     Schedule[]

  @@index([workerId])
}

model Attendance {
  id             Int      @id @default(autoincrement())
  Schedule       Schedule @relation(fields: [ScheduleId], references: [id], onDelete: Cascade)
  ScheduleId     Int      @unique
  member         Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId       Int      @unique
  attendanceDate DateTime
  attendanceTime DateTime
  Status         String

  @@index([ScheduleId])
  @@index([memberId])
}

enum Status {
  Present
  Absent
}

model WorkerMember {
  id       Int    @id @default(autoincrement())
  worker   Worker @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId Int    @unique
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId Int    @unique

  @@index([workerId])
  @@index([memberId])
}

model Payment {
  id            Int      @id @default(autoincrement())
  member        Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId      Int      @unique
  forMonth      DateTime // 어떤 월에 대한 납부인지 나타내는 컬럼
  paymentDate   DateTime // 실제 납부가 이루어진 날짜
  amount        Decimal // 납부해야 하는 금액 또는 실제 납부된 금액
  isPaid        Boolean // 납부 여부를 나타내는 불리언 값
  dueDate       DateTime // 납부 기한 날짜
  paymentMethod String // 납부 방법

  @@index([memberId])
}
